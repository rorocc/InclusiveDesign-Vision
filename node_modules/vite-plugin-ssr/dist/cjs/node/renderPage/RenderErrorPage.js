"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertRenderErrorPageParentheses = exports.RenderErrorPage = exports.isRenderErrorPage = void 0;
const assertPageContextProvidedByUser_1 = require("../../shared/assertPageContextProvidedByUser");
const utils_1 = require("../utils");
const stamp = Symbol('isRenderErrorPage');
function isRenderErrorPage(thing) {
    assertRenderErrorPageParentheses(thing);
    return typeof thing === 'object' && thing !== null && stamp in thing;
}
exports.isRenderErrorPage = isRenderErrorPage;
function RenderErrorPage({ pageContext } = {}) {
    {
        // @ts-ignore
        const that = this;
        (0, utils_1.assertUsage)(!(typeof that === 'object' && (that === null || that === void 0 ? void 0 : that.constructor) === RenderErrorPage), 'Do not use the `new` operator: use `throw RenderErrorPage()` instead of `throw new RenderErrorPage()`.');
    }
    (0, assertPageContextProvidedByUser_1.assertPageContextProvidedByUser)(pageContext, {
        errorMessagePrefix: 'The `pageContext` provided in `RenderErrorPage({ pageContext })`',
    });
    const err = new Error('RenderErrorPage');
    (0, utils_1.objectAssign)(err, { pageContext, [stamp]: true });
    return err;
}
exports.RenderErrorPage = RenderErrorPage;
function assertRenderErrorPageParentheses(err) {
    (0, utils_1.assertUsage)(err !== RenderErrorPage, 'Missing parentheses `()` in `throw RenderErrorPage`: it should be `throw RenderErrorPage()`.');
}
exports.assertRenderErrorPageParentheses = assertRenderErrorPageParentheses;
