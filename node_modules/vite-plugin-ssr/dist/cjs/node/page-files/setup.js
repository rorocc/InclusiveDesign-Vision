"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const getPageFiles_1 = require("../../shared/getPageFiles");
const ssrEnv_1 = require("../ssrEnv");
const utils_1 = require("../utils");
const url_1 = require("url");
/*
import { isAbsolute } from 'path'
import { projectInfo } from '../utils'
*/
(0, getPageFiles_1.setPageFilesAsync)(setPageFiles);
async function setPageFiles() {
    const ssrEnv = (0, ssrEnv_1.getSsrEnv)();
    (0, utils_1.assert)(!(0, utils_1.isBrowser)()); // Catched earlier by an `assertUsage()` call in `node/index.ts`
    (0, utils_1.assertUsage)(isNodejs(), ssrEnv.isProduction
        ? "You production environment doesn't seem to be a Node.js server; you need to load `importBuild.js`, see https://vite-plugin-ssr.com/importBuild.js"
        : "Your development environment doesn't seem to be Node.js. If this is a production environment then make sure that `isProduction: true`.");
    const userDist = `${ssrEnv.root}/${ssrEnv.outDir}`;
    const viteEntryPathProd = `${userDist}/server/pageFiles.js`;
    // Current directory: vite-plugin-ssr/dist/cjs/node/page-files/
    const pluginRoot = (0, path_1.join)(__dirname, `../../../..`);
    const viteEntryPathDev = `${pluginRoot}/dist/esm/node/page-files/pageFiles.js`;
    let moduleExports;
    if (ssrEnv.isProduction) {
        const viteEntryResolved = (0, path_1.resolve)(viteEntryPathProd);
        (0, utils_1.assertUsage)((0, utils_1.moduleExists)(viteEntryResolved), 'Make sure to run `vite build && vite build --ssr` before running your Node.js server with `createPageRenderer({ isProduction: true })`' +
            `. (Build file ${viteEntryResolved} is missing.)`);
        moduleExports = await dynamicImport(viteEntryResolved);
    }
    else {
        (0, utils_1.assert)(ssrEnv.viteDevServer);
        const viteEntryResolved = (0, path_1.resolve)(viteEntryPathDev);
        // const viteEntryResolved = requireResolve(viteEntryPathDev)
        moduleExports = await ssrEnv.viteDevServer.ssrLoadModule(viteEntryResolved);
    }
    const pageFiles = moduleExports.pageFiles || moduleExports.default.pageFiles;
    (0, utils_1.assert)(pageFiles);
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFiles, '.page'));
    return pageFiles;
}
async function dynamicImport(filePath) {
    return new Function('file', 'return import(file)')((0, url_1.pathToFileURL)(filePath).href);
}
/*
function requireResolve(modulePath: string): string {
  return req.resolve(modulePath)
}
*/
function isNodejs() {
    try {
        return typeof process !== 'undefined' && process.release.name === 'node';
    }
    catch (_) {
        return false;
    }
}
