"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = void 0;
const types_1 = require("./types");
function stringify(value, { forbidReactElements, space, valueName = 'value', } = {}) {
    const path = [];
    // The only error `JSON.stringify()` can throw is `TypeError "cyclic object value"`.
    // - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#exceptions
    // - This means we have total of 3 possible errors while serializing:
    //    - Cyclic references
    //    - Functions
    //    - React elements
    const serializer = (val) => JSON.stringify(val, replacer, space);
    return serializer(value);
    function replacer(key, value) {
        if (key !== '') {
            path.push(key);
        }
        if (forbidReactElements && isReactElement(value)) {
            throw new Error(genErrMsg('React element'));
        }
        if (isFunction(value)) {
            const functionName = value.name;
            throw new Error(genErrMsg('function', path.length === 0 ? functionName : undefined));
        }
        const valueOriginal = this[key];
        for (const { is, serialize } of types_1.types.slice().reverse()) {
            if (is(valueOriginal)) {
                //@ts-ignore
                return serialize(valueOriginal, serializer);
            }
        }
        return value;
    }
    function genErrMsg(valueType, valName) {
        const name = valName ? ' `' + valName + '`' : '';
        const location = path.length === 0 ? '' : ` ${name ? 'at ' : ''}\`${valueName}[${path.map((p) => `'${p}'`).join('][')}]\``;
        const fallback = name === '' && location === '' ? ` ${valueName}` : '';
        return `Cannot serialize${name}${location}${fallback} because it is a ${valueType}. Serializer: https://github.com/brillout/json-s`;
    }
}
exports.stringify = stringify;
function isReactElement(value) {
    return (typeof value === 'object' &&
        value !== null &&
        String(value['$$typeof']) === 'Symbol(react.element)');
}
function isFunction(thing) {
    return thing instanceof Function || typeof thing === 'function';
}
